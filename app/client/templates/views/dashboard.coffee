###*
Template Controllers

@module Templates
###

# Construct Multiply Contract Object and contract instance
contractInstance = undefined


isZero = (key) ->
  return true if key == '0x0000000000000000000000000000000000000000000000000000000000000000'
  if key == '0x'
    console.log "weird key: " + key
    return true
  return false

# Helper method to get all elements in a linked list
getAllElements = (listContract) ->
  list = []
  tail = listContract.tail()

  if isZero(tail)
    console.log "empty list"
    return list
  currentKey = tail

  while !isZero(currentKey)
    console.log "currentKey: "
    console.log currentKey

    elem = listContract.actions(currentKey)
    # convert to JS object
    elem = web3.returnObject("actions", elem, listContract.abi)

    list.push elem
    currentKey = elem.next

  console.log "list"
  console.log list
  return list

# ---
# generated by js2coffee 2.2.0

mine_contract = (Contract) ->
  # Create Contract
  # Set coinbase as the default account
  web3.eth.defaultAccount = web3.eth.coinbase

  # assemble the tx object w/ default gas value
  transactionObject =
    data: Contract.bytecode
    gasPrice: web3.eth.gasPrice
    gas: 500000
    from: web3.eth.accounts[0]
  # estimate gas cost then transact new MultiplyContract
  web3.eth.estimateGas transactionObject, (err, estimateGas) ->
    # multiply by 10 hack for testing
    if !err
      transactionObject.gas = estimateGas * 10
    Contract.new transactionObject, (err, contract) ->
      if err
        console.log err
      if contract.address
        console.log 'mined contract at ' + contract.address
        contractInstance = contract
      return
    return
  return


Template['dashboard'].helpers
  actions: ->
    Actions.find({})

  soon: ->
    Session.get('soon')

  done: ->
    [
      {
        name: 'Buy 50\' catamaran for $500,000'
        description: 'We need a suitable boat for this to work'
        votes: 60
        tags: [ 'urgent' ]
      }
      {
        name: 'Buy food'
        description: 'To live, we need food'
        votes: 10
        tags: [ 'food', 'urgent' ]
      }
    ]
  available_ether: ->
    web3
    25.237653
  needed_ether: ->
    16825.0

# When the template is created
Template['dashboard'].onRendered ->
  if !contractInstance
    mine_contract(Organization)

  coinbase = web3.eth.coinbase
  @updateSoonActions = Meteor.setInterval((->
    # debugger
    # console.log getAllElements(contractInstance)
    Session.set 'soon', getAllElements(contractInstance)

    # Add some actions
    params1 = "0x" + web3.sha3( JSON.stringify({
      data: "test"
    }))

    params2 = {
      data: "test2"
    }
    # function addAction(bytes32 key, string _name, uint _kind, bytes32 _data, uint _amount) returns (bool){
    contractInstance.addAction.sendTransaction( contractInstance.address, 0x10, ( "0x" + web3.sha3("test") ), 1, params1, 10, {from: web3.eth.accounts[0], gas:1000000}, (err, result) ->
      console.log "Added a new test action at 0x10"
      console.log "err"
      console.log err
      console.log "result"
      console.log result )

    # debugger

  ), 5 * 1000)
  return

Template['dashboard'].onDestroyed ->
  Meteor.clearInterval @updateSoonActions
  return

# Submit form
Template['dashboard'].events 'submit .new-action': (event) ->
  # Prevent default browser form submit
  event.preventDefault()
  # Get value from form element
  target = event.target

  name_el = $(target).find('[name="name"]')[0]
  description_el = $(target).find('[name="description"]')[0]
  tags_el = $(target).find('[name="tags"]')[0]

  name = name_el.value
  description = description_el.value
  tags = tags_el.value

  # Insert Action into the collection
  data = {
    name: name
    description: description
    tags: tags.split(/[ ,]+/)
    createdAt: new Date
  }

  Actions.insert data, (error, result) ->
    if result
      # Clear form
      name_el.value = ''
      description_el.value = ''
      tags_el.value = ''
      $(target).find('.error').html('')
    else
      $(target).find('.error').html(error)
  return
