###*
Template Controllers

@module Templates
###

###*
The multiply contract template.

Note, the MultiplyContract object is now housed in client/lib/contracts/MultiplyContract.sol

@class [template] components_multiplyContract
@constructor
###

# solidity source code
source = '' + 'contract test {\n' + '   function multiply(uint a) returns(uint d) {\n' + '       return a * 7;\n' + '   }\n' + '}\n'
# Construct Multiply Contract Object and contract instance
contractInstance = undefined

# When the template is rendered
Template['components_multiplyContract'].onRendered ->
  TemplateVar.set 'state', isInactive: true
  return

Template['components_multiplyContract'].helpers 'source': ->
  source

Template['components_multiplyContract'].events
  'click .btn-default': (event, template) ->
    # Create Contract
    TemplateVar.set 'state', isMining: true
    # Set coinbase as the default account
    web3.eth.defaultAccount = web3.eth.coinbase
    # assemble the tx object w/ default gas value
    transactionObject =
      data: MultiplyContract.bytecode
      gasPrice: web3.eth.gasPrice
      gas: 500000
      from: web3.eth.accounts[0]
    # estimate gas cost then transact new MultiplyContract
    web3.eth.estimateGas transactionObject, (err, estimateGas) ->
      # multiply by 10 hack for testing
      if !err
        transactionObject.gas = estimateGas * 10
      MultiplyContract.new transactionObject, (err, contract) ->
        if err
          return TemplateVar.set(template, 'state',
            isError: true
            error: String(err))
        if contract.address
          TemplateVar.set template, 'state',
            isMined: true
            address: contract.address
            source: source
          contractInstance = contract
        return
      return
    return
  'keyup #multiplyValue': (event, template) ->
    # the input value
    value = template.find('#multiplyValue').value
    # call MultiplyContract method `multiply` which should multiply the `value` by 7
    contractInstance.multiply.call value, (err, result) ->
      TemplateVar.set template, 'multiplyResult', result.toNumber(10)
      if err
        TemplateVar.set template, 'multplyResult', String(err)
      return
    return

# ---
# generated by js2coffee 2.2.0
